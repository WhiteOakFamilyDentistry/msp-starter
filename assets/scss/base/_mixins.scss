//============
// Mixins
//============

//--------------------------
// Responsive Breakpoints
//--------------------------

@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);
  // These match Bootstrap's breakpoints
  @if $type == string {
    @if $min == xs {
      @media (max-width: 575px) {
        @content;
      } // Mobile Devices
    } @else if $min == sm {
      @media (max-width: 767px) {
        @content;
      } // Tablet Devices
    } @else if $min == md {
      @media (max-width: 991px) {
        @content;
      } // Desktops
    } @else if $min == lg {
      @media (max-width: 1199px) {
        @content;
      } // Widescreen Desktops
    }

    // Otherwise pass a warning to the compiler as to the appropriate options
    @else {
      @warn "The breakpoint mixin supports the following attributes: xs, sm, md, lg";
    }
  } @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: 'all' !default;
    @if $min != 0 and $max != 0 {
      $query: '(min-width: #{$min}) and (max-width: #{$max})';
    } // set both min and max
    @else if $min != 0 and $max == 0 {
      $query: '(min-width: #{$min})';
    } // set just min
    @else if $min == 0 and $max != 0 {
      $query: '(max-width: #{$max})';
    } // set just max
    @media #{$query} {
      @content;
    }
  }
}

//---------------------------------------
// Convert Pixels to REMS for Typography
//---------------------------------------

$default-line-height: 1.43 !default;

@function calculateRem($size) {
  $remSize: calc($size / 16px);
  @return #{$remSize}rem;
}
@mixin font-size($size, $lineHeight: $default-line-height) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size);
  line-height: $lineHeight;
}
@mixin letter-spacing($size) {
  letter-spacing: $size;
  letter-spacing: calculateRem($size);
}

//==============================
// Miscellaneous Mixins
//==============================

/* Controls the site's SVG logos */
@mixin svg-logo($width, $fill) {
  max-width: 100%;
  width: $width;
  height: 100%;
  g {
    fill: $fill;
  }
}

/* Easy Image Hover */
@mixin easy-image-hover($effect, $opacity) {
  transition: $effect;
  &:hover {
    transition: $effect;
    opacity: $opacity;
  }
}

/* Flexbox Quickies */
@mixin flex-row($align, $justify) {
  display: flex;
  flex-flow: row nowrap;
  align-items: $align;
  justify-content: $justify;
  width: 100%;
}

@mixin flex-row-reverse($align, $justify) {
  display: flex;
  flex-flow: row-reverse nowrap;
  align-items: $align;
  justify-content: $justify;
  width: 100%;
}

@mixin flex-row-wrap($align, $justify) {
  display: flex;
  flex-flow: row wrap;
  align-items: $align;
  justify-content: $justify;
  width: 100%;
}

@mixin flex-column($align, $justify) {
  display: flex;
  align-items: $align;
  justify-content: $justify;
  flex-flow: column nowrap;
}

/* Flexbox Images */
@mixin flexy-image($height) {
  display: flex;
  flex-flow: column nowrap;
  justify-content: center;
  max-height: $height;
  overflow: hidden;
  img {
    width: 100%;
    max-width: 100%;
    height: 100%;
  }
}
